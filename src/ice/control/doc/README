=====================================================================
ice.control - System Administration and Site Management for BlueBream
=====================================================================

.. contents::
   :local:


Getting started
===============

If you have not yet a BlueBream project, just create it. For example,
using paster template.

Add `ice.control` package into dependencies of your project. There
are 2 ways: using release package from PyPI server or using Git
branch from GitHub repository.


Install from PyPI server
++++++++++++++++++++++++

Install newest release package from PyPI server and resolve dependencies.
For this, just add the package into setup.py::

   install_requires=[...
                    'ice.control'
                    ],


Install from Git repository
+++++++++++++++++++++++++++

Download sources from GitHub repository using `mr.developer` buildout
extention. You have much more control on the source code using this way.

It requires number of steps first time, but simple to maintain in
futher. First, add follow lines into buildout.cfg, section [buildout]::

  [buildout]
  ...

  extensions = mr.developer
  sources-dir = dev
  sources = sources

then run buildout to create `develop` script::

  $ bin/buildout

then add section [sources] into buildout.cfg::

  [sources]
  ice.control = git git://github.com/astoon/ice.control.git

and run the script to download the branch::

  $ bin/develop checkout ice.*

You'll see now the package branch in /dev directory. Allow to run tests
from ice.control package. For this, edit buildout.cfg again::

  [test]
  ...
  eggs = sample
         ice.control

and add dependency for your project in setup.py::

   install_requires=[...
                    'ice.control'
                    ],

Finally, run buildout::

  $ bin/buildout


Include zcml files 
++++++++++++++++++

There are number of options to use ice.control. If you like to use
entire functionality of the package, add these lines into your
configure.zcml file::

  <include package="ice.control.zcml" />
  <include package="ice.control.repl" />
  <include package="ice.control" />
  <browser:defaultSkin name="control" />

It means:
- `control` system [ice.control.browser],
- default control modules for this system (`controls`) [ice.control.controls.*],
- z3c.pagelet based simple skin [ice.control.skin],
- make this skin default,
- use alternate layout template for controls [skin/default_layout.pt],
- use repl to interact and debug the applications
  [ice.control.repl, ice.control.controls.details.repl],
- use hepler module to garantee that you have included all the needed
registrations for the other packages [ice.control.zcml]

NOTE: if you created project using Paster template (see above) then
add these zcml directoves into configure.zcml before directive
<include file="securitypolicy.zcml" />.

Summary, it is not necessary to include entire ice.control
package. Functionaliy of ice.control (i.e. `controls`, ice.control.browser
and ice.control.controls) can be used from __any__ layout skin based
on z3c.pagelet. Make sure you have special place for zc.resourcelibrary
and place for sidebar in layout template. For this, see skin/configure.zcml,
directive z3c:layout for context ice.control.browser.interfaces.IControl
and learn it. I.e. you might use special layout template only for this
context.

Now run tests and run the server::

  $ bin/test
  $ bin/paster serve debug.ini


Admin UI for BlueBream
======================

There are virtual context, `++etc++control` for the `controls`.
It is not real persistent object.

In "Tree" `control` are contents' tree which show database
structure. Open / close tree branches by clicking on triangles.
Click links (names or icons) to open "Details" ajax pseudo-window.
See menu at bottom of this pseudo-window.

This "Details" ajax psudo-window might be closed or minimized
into "dock". It contains number of sub-views, depend on context
and depend on your custom registrations:

"Contents" - for containers, allow to rename and remove contained
items. Uses pagination ("batching") when lenght of the listing is
>10.

"Metadata" - form for edit Dublin core Metadata.

"Introspector" - inspect persistent objects, looking apidoc.

"REPL" - interactive Python shell to inspect and edit persistent
objects, interact with this instance. Uses current context.

"Configurator" - general way to manage ZODB.

You might like to add your custom views to "Details". See below.

There are another `controls`, not only contents tree. See and
learn UI. You might like to add your custom `controls` also, see
below.
